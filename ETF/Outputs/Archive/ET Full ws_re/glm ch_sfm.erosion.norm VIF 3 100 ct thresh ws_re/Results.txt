
> model_name
[1] "glm ch_sfm.erosion.norm VIF 3 100 ct thresh ws_re"

> model_formula
ch_sfm.erosion.norm ~ ws_flow.accum.max + ws_slope.mean + ws_bare.earth.mean + 
    ws_drainage_density + ws_RV.Sand + ch_slope.median + ch_curvature.median + 
    ch_valley_width + ch_change.in.slope.over.width + ch_channel.width.over.valley.width + 
    ch_slope.over.width.central.diff + ch_stream.power.central.diff + 
    hs_hillslope.length + hs_slope.median + hs_northness.median + 
    hs_eastness.median + hs_curvature.median + hs_bare.earth.mean + 
    hs_ndvi.range + hs_dnbr.median + hs_drainage_density + flow.accumulation.max

> ssn_mod <- ssn_glm(
+   formula = model_formula,
+   ssn.object = ET_ssn,
+   family = "Gamma",
+   tailup_type = "exponential",
+   taildown_type = .... [TRUNCATED] 

> # Print the summary of the model to the file and console
> print(summary(ssn_mod))

Call:
ssn_glm(formula = model_formula, ssn.object = ET_ssn, family = "Gamma", 
    tailup_type = "exponential", taildown_type = "none", euclid_type = "gaussian", 
    additive = "afv_flow_accum", random = ~as.factor(ch_watershed))

Deviance Residuals:
      Min        1Q    Median        3Q       Max 
-1.899096 -0.244484  0.005467  0.190863  1.013314 

Coefficients (fixed):
                                     Estimate Std. Error z value Pr(>|z|)    
(Intercept)                        -1.9686360  0.8984917  -2.191   0.0284 *  
ws_flow.accum.max                  -0.4236557  0.2325182  -1.822   0.0685 .  
ws_slope.mean                       1.1187663  0.2768520   4.041 5.32e-05 ***
ws_bare.earth.mean                 -0.2392941  0.1509909  -1.585   0.1130    
ws_drainage_density                 0.0383747  0.0194197   1.976   0.0481 *  
ws_RV.Sand                         -0.4079859  0.4034231  -1.011   0.3119    
ch_slope.median                     0.1481487  0.0706427   2.097   0.0360 *  
ch_curvature.median                 0.0008038  0.0666369   0.012   0.9904    
ch_valley_width                    -0.0488746  0.0746302  -0.655   0.5125    
ch_change.in.slope.over.width      -0.0271306  0.0178150  -1.523   0.1278    
ch_channel.width.over.valley.width  0.0736065  0.0756281   0.973   0.3304    
ch_slope.over.width.central.diff    0.0457687  0.0266721   1.716   0.0862 .  
ch_stream.power.central.diff        0.0053541  0.0176862   0.303   0.7621    
hs_hillslope.length                -0.0551840  0.0466631  -1.183   0.2370    
hs_slope.median                     0.0838467  0.0900029   0.932   0.3515    
hs_northness.median                -0.1063774  0.0667991  -1.592   0.1113    
hs_eastness.median                 -0.0179435  0.0455613  -0.394   0.6937    
hs_curvature.median                 0.0109864  0.0303161   0.362   0.7171    
hs_bare.earth.mean                  0.0871841  0.0677662   1.287   0.1983    
hs_ndvi.range                      -0.0358530  0.0722844  -0.496   0.6199    
hs_dnbr.median                      0.0227799  0.0780155   0.292   0.7703    
hs_drainage_density                 0.4510822 13.7896864   0.033   0.9739    
flow.accumulation.max              -0.1191132  0.0745331  -1.598   0.1100    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Pseudo R-squared: 0.03917

Coefficients (covariance):
              Effect                    Parameter   Estimate
  tailup exponential                 de (parsill)  1.417e+00
  tailup exponential                        range  8.651e+01
     euclid gaussian                 de (parsill)  1.813e+00
     euclid gaussian                        range  5.405e+03
              nugget                       nugget  1.308e-03
          dispersion                   dispersion  3.411e+00
              random  1 | as.factor(ch_watershed)  3.019e-01


> # Print variance components of the model
> varcomp(ssn_mod)
# A tibble: 6 × 2
  varcomp                     proportion
  <chr>                            <dbl>
1 Covariates (PR-sq)            0.0392  
2 tailup_de                     0.385   
3 taildown_de                   0       
4 euclid_de                     0.493   
5 nugget                        0.000356
6 1 | as.factor(ch_watershed)   0.0821  

> # Tidy the model output with confidence intervals and print
> print(tidy(ssn_mod, conf.int = TRUE))  
# A tibble: 23 × 7
   term                                estimate std.error statistic p.value conf.low conf.high
   <chr>                                  <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl>
 1 (Intercept)                        -1.97        0.898    -2.19    0.0284 -3.73     -0.208  
 2 ch_change.in.slope.over.width      -0.0271      0.0178   -1.52    0.128  -0.0620    0.00779
 3 ch_channel.width.over.valley.width  0.0736      0.0756    0.973   0.330  -0.0746    0.222  
 4 ch_curvature.median                 0.000804    0.0666    0.0121  0.990  -0.130     0.131  
 5 ch_slope.median                     0.148       0.0706    2.10    0.0360  0.00969   0.287  
 6 ch_slope.over.width.central.diff    0.0458      0.0267    1.72    0.0862 -0.00651   0.0980 
 7 ch_stream.power.central.diff        0.00535     0.0177    0.303   0.762  -0.0293    0.0400 
 8 ch_valley_width                    -0.0489      0.0746   -0.655   0.513  -0.195     0.0974 
 9 flow.accumulation.max              -0.119       0.0745   -1.60    0.110  -0.265     0.0270 
10 hs_bare.earth.mean                  0.0872      0.0678    1.29    0.198  -0.0456    0.220  
# ℹ 13 more rows
# ℹ Use `print(n = ...)` to see more rows

> # Provide a glance summary of the model and print
> print(glance(ssn_mod))
# A tibble: 1 × 9
      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared
  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>
1   645    23     7 1013. 1027. 1027.  -506.     99.1           0.0392

> # Perform Leave-One-Out Cross Validation and print
> print("Leave One Out Cross Validation")
[1] "Leave One Out Cross Validation"

> loocv_results <- loocv(ssn_mod)

> print(loocv_results)
# A tibble: 1 × 4
     bias  MSPE RMSPE   RAV
    <dbl> <dbl> <dbl> <dbl>
1 -0.0753 0.163 0.403 0.768

> # Stop redirecting output
> sink()

> print("")
[1] ""

> # ----------------------------#
> # 10. Statistical Tests
> # ----------------------------#
> 
> 
> # --------- Shapiro-Wilk Test for Normality ---- .... [TRUNCATED] 
[1] "-------- Shapiro-Wilk Test for Normality ---------"

> print("  - Normality: To check if the residuals are normally distributed.")
[1] "  - Normality: To check if the residuals are normally distributed."

> print("  - p-value > 0.05: Fail to reject null hypothesis (residuals are normally distributed).")
[1] "  - p-value > 0.05: Fail to reject null hypothesis (residuals are normally distributed)."

> print("  - p-value <= 0.05: Reject null hypothesis (residuals are not normally distributed).\n")
[1] "  - p-value <= 0.05: Reject null hypothesis (residuals are not normally distributed).\n"

> shapiro_test <- shapiro.test(residuals)

> print("Shapiro-Wilk Test Results:")
[1] "Shapiro-Wilk Test Results:"

> print(shapiro_test)

	Shapiro-Wilk normality test

data:  residuals
W = 0.96702, p-value = 7.299e-11


> # --------- Breusch-Pagan Test for Homoscedasticity ---------
> print("-------- Breusch-Pagan Test for Homoscedasticity ---------")
[1] "-------- Breusch-Pagan Test for Homoscedasticity ---------"

> print("  - Homoscedasticity: To check if residuals have constant variance across all levels of fitted values.")
[1] "  - Homoscedasticity: To check if residuals have constant variance across all levels of fitted values."

> print("  - p-value > 0.05: Fail to reject null hypothesis (homoscedasticity holds).")
[1] "  - p-value > 0.05: Fail to reject null hypothesis (homoscedasticity holds)."

> print("  - p-value <= 0.05: Reject null hypothesis (heteroscedasticity present).\n")
[1] "  - p-value <= 0.05: Reject null hypothesis (heteroscedasticity present).\n"

> # Extract the model frame from the ssn_lm model
> data_ssn <- model.frame(ssn_mod)

> # Perform Breusch-Pagan Test
> bp_test <- bptest(ssn_mod)

> print("Breusch-Pagan Test Results:")
[1] "Breusch-Pagan Test Results:"

> print(bp_test)

	studentized Breusch-Pagan test

data:  ssn_mod
BP = 59.412, df = 22, p-value = 2.729e-05


> # --------- Moran's I Test for Spatial Autocorrelation ---------
> print("\n-------- Moran's I Test for Spatial Autocorrelation ---------")
[1] "\n-------- Moran's I Test for Spatial Autocorrelation ---------"

> print("  - Spatial Autocorrelation: To determine if there is spatial autocorrelation in the residuals.")
[1] "  - Spatial Autocorrelation: To determine if there is spatial autocorrelation in the residuals."

> print("  - p-value > 0.05: Fail to reject null hypothesis (lack of spatial autocorrelation in residuals holds).")
[1] "  - p-value > 0.05: Fail to reject null hypothesis (lack of spatial autocorrelation in residuals holds)."

> print("  - p-value <= 0.05: Reject null hypothesis (spatial autocorrelation present).\n")
[1] "  - p-value <= 0.05: Reject null hypothesis (spatial autocorrelation present).\n"

> sink()

> print("Moran's I Test Results:")
[1] "Moran's I Test Results:"

> print(moran_test)

	Moran I test under randomisation

data:  residuals  
weights: lw    

Moran I statistic standard deviate = -7.2445, p-value = 1
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
    -0.1978360659     -0.0015527950      0.0007340926 


> # Stop redirecting output
> sink()
