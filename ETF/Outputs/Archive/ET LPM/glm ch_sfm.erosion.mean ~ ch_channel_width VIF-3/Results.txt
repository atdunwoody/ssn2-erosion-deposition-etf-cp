
> # Fit the linear model using SSN2
> # Purpose: Model the relationship between deposition and various stream and watershed characteristics
> # ssn_mo .... [TRUNCATED] 

> # Print the summary of the model to the file and console
> print(summary(ssn_mod))

Call:
ssn_glm(formula = model_formula, ssn.object = ET_ssn, family = "Gamma", 
    tailup_type = "exponential", taildown_type = "none", euclid_type = "gaussian", 
    additive = "afv_flow_accum")

Deviance Residuals:
       Min         1Q     Median         3Q        Max 
-9.348e-09  0.000e+00  0.000e+00  0.000e+00  1.481e-08 

Coefficients (fixed):
                                   Estimate Std. Error z value Pr(>|z|)    
(Intercept)                        -1.04877    0.07211 -14.544  < 2e-16 ***
ch_channel_width                   -0.24364    0.11621  -2.097 0.036027 *  
ch_channel.width.over.valley.width  0.16592    0.10322   1.607 0.107960    
ch_stream.power.central.diff        0.08476    0.05405   1.568 0.116816    
ch_curvature.median                 0.16728    0.06568   2.547 0.010874 *  
hs_slope.median                    -0.22168    0.05704  -3.886 0.000102 ***
hs_dnbr.median                     -0.21284    0.07431  -2.864 0.004182 ** 
hs_bare.earth.mean                 -0.06394    0.07590  -0.843 0.399502    
hs_curvature.median                -0.15109    0.07226  -2.091 0.036552 *  
ch_slope.median                     0.07983    0.09691   0.824 0.410093    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Coefficients (covariance):
              Effect     Parameter   Estimate
  tailup exponential  de (parsill)  2.170e-01
  tailup exponential         range  6.980e+00
     euclid gaussian  de (parsill)  1.224e-14
     euclid gaussian         range  8.248e+00
              nugget        nugget  6.689e-04
          dispersion    dispersion  5.820e+15


> # Print variance components of the model
> varcomp(ssn_mod)
# A tibble: 5 × 2
  varcomp            proportion
  <chr>                   <dbl>
1 Covariates (PR-sq)   0       
2 tailup_de            9.97e- 1
3 taildown_de          0       
4 euclid_de            5.63e-14
5 nugget               3.07e- 3

> # Tidy the model output with confidence intervals and print
> print(tidy(ssn_mod, conf.int = TRUE))  
# A tibble: 10 × 7
   term                               estimate std.error statistic  p.value conf.low conf.high
   <chr>                                 <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl>
 1 (Intercept)                         -1.05      0.0721   -14.5   0         -1.19    -0.907  
 2 ch_channel.width.over.valley.width   0.166     0.103      1.61  0.108     -0.0364   0.368  
 3 ch_channel_width                    -0.244     0.116     -2.10  0.0360    -0.471   -0.0159 
 4 ch_curvature.median                  0.167     0.0657     2.55  0.0109     0.0385   0.296  
 5 ch_slope.median                      0.0798    0.0969     0.824 0.410     -0.110    0.270  
 6 ch_stream.power.central.diff         0.0848    0.0540     1.57  0.117     -0.0212   0.191  
 7 hs_bare.earth.mean                  -0.0639    0.0759    -0.843 0.400     -0.213    0.0848 
 8 hs_curvature.median                 -0.151     0.0723    -2.09  0.0366    -0.293   -0.00945
 9 hs_dnbr.median                      -0.213     0.0743    -2.86  0.00418   -0.358   -0.0672 
10 hs_slope.median                     -0.222     0.0570    -3.89  0.000102  -0.333   -0.110  

> # Provide a glance summary of the model and print
> print(glance(ssn_mod))
# A tibble: 1 × 9
      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared
  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>
1    78    10     6  118.  130.  131.  -58.9 2.18e-15                0

> # Perform Leave-One-Out Cross Validation and print
> print("Leave One Out Cross Validation")
[1] "Leave One Out Cross Validation"

> loocv_results <- loocv(ssn_mod)

> print(loocv_results)
# A tibble: 1 × 4
     bias   MSPE RMSPE   RAV
    <dbl>  <dbl> <dbl> <dbl>
1 -0.0417 0.0812 0.285 0.475

> # Stop redirecting output
> sink()

> print("")
[1] ""

> # ----------------------------#
> # 10. Statistical Tests
> # ----------------------------#
> 
> 
> # --------- Shapiro-Wilk Test for Normality ---- .... [TRUNCATED] 
[1] "-------- Shapiro-Wilk Test for Normality ---------"

> print("  - Normality: To check if the residuals are normally distributed.")
[1] "  - Normality: To check if the residuals are normally distributed."

> print("  - p-value > 0.05: Fail to reject null hypothesis (residuals are normally distributed).")
[1] "  - p-value > 0.05: Fail to reject null hypothesis (residuals are normally distributed)."

> print("  - p-value <= 0.05: Reject null hypothesis (residuals are not normally distributed).\n")
[1] "  - p-value <= 0.05: Reject null hypothesis (residuals are not normally distributed).\n"

> shapiro_test <- shapiro.test(residuals)

> print("Shapiro-Wilk Test Results:")
[1] "Shapiro-Wilk Test Results:"

> print(shapiro_test)

	Shapiro-Wilk normality test

data:  residuals
W = 0.6509, p-value = 2.517e-12


> # --------- Breusch-Pagan Test for Homoscedasticity ---------
> print("-------- Breusch-Pagan Test for Homoscedasticity ---------")
[1] "-------- Breusch-Pagan Test for Homoscedasticity ---------"

> print("  - Homoscedasticity: To check if residuals have constant variance across all levels of fitted values.")
[1] "  - Homoscedasticity: To check if residuals have constant variance across all levels of fitted values."

> print("  - p-value > 0.05: Fail to reject null hypothesis (homoscedasticity holds).")
[1] "  - p-value > 0.05: Fail to reject null hypothesis (homoscedasticity holds)."

> print("  - p-value <= 0.05: Reject null hypothesis (heteroscedasticity present).\n")
[1] "  - p-value <= 0.05: Reject null hypothesis (heteroscedasticity present).\n"

> # Extract the model frame from the ssn_lm model
> data_ssn <- model.frame(ssn_mod)

> # Perform Breusch-Pagan Test
> bp_test <- bptest(ssn_mod)

> print("Breusch-Pagan Test Results:")
[1] "Breusch-Pagan Test Results:"

> print(bp_test)

	studentized Breusch-Pagan test

data:  ssn_mod
BP = 28.892, df = 9, p-value = 0.0006759


> # --------- Moran's I Test for Spatial Autocorrelation ---------
> print("\n-------- Moran's I Test for Spatial Autocorrelation ---------")
[1] "\n-------- Moran's I Test for Spatial Autocorrelation ---------"

> print("  - Spatial Autocorrelation: To determine if there is spatial autocorrelation in the residuals.")
[1] "  - Spatial Autocorrelation: To determine if there is spatial autocorrelation in the residuals."

> print("  - p-value > 0.05: Fail to reject null hypothesis (lack of spatial autocorrelation in residuals holds).")
[1] "  - p-value > 0.05: Fail to reject null hypothesis (lack of spatial autocorrelation in residuals holds)."

> print("  - p-value <= 0.05: Reject null hypothesis (spatial autocorrelation present).\n")
[1] "  - p-value <= 0.05: Reject null hypothesis (spatial autocorrelation present).\n"

> sink()

> print("Moran's I Test Results:")
[1] "Moran's I Test Results:"

> print(moran_test)

	Moran I test under randomisation

data:  residuals  
weights: lw    

Moran I statistic standard deviate = 1.1087, p-value = 0.1338
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
      0.072252713      -0.012987013       0.005910698 


> # Stop redirecting output
> sink()
