
> model_name
[1] "glm ch_sfm.erosion.mean ~ ch_channel_width VIF-inf"

> model_formula
ch_sfm.erosion.mean ~ ch_channel_width + ch_channel.width.over.valley.width + 
    ws_drainage_density + hs_aspect.median + hs_slope.median + 
    ch_valley_width + hs_dnbr.median + hs_bare.earth.mean + hs_hillslope.length + 
    hs_curvature.median

> ssn_mod <- ssn_glm(
+   formula = model_formula,
+   ssn.object = ET_ssn,
+   family = "Gamma",
+   tailup_type = "exponential",
+   taildown_type = .... [TRUNCATED] 

> # Print the summary of the model to the file and console
> print(summary(ssn_mod))

Call:
ssn_glm(formula = model_formula, ssn.object = ET_ssn, family = "Gamma", 
    tailup_type = "exponential", taildown_type = "none", euclid_type = "gaussian", 
    additive = "afv_flow_accum")

Deviance Residuals:
     Min       1Q   Median       3Q      Max 
-0.79871 -0.20568 -0.03461  0.18785  0.53295 

Coefficients (fixed):
                                    Estimate Std. Error z value Pr(>|z|)  
(Intercept)                         0.510535   2.021641   0.253   0.8006  
ch_channel_width                   -0.254454   0.227117  -1.120   0.2626  
ch_channel.width.over.valley.width  0.250482   0.267782   0.935   0.3496  
ws_drainage_density                -0.296809   0.245211  -1.210   0.2261  
hs_aspect.median                    0.127580   0.161562   0.790   0.4297  
hs_slope.median                    -0.133306   0.062194  -2.143   0.0321 *
ch_valley_width                     0.009658   0.213800   0.045   0.9640  
hs_dnbr.median                     -0.209953   0.093746  -2.240   0.0251 *
hs_bare.earth.mean                  0.096617   0.124151   0.778   0.4364  
hs_hillslope.length                 0.031236   0.111249   0.281   0.7789  
hs_curvature.median                -0.189454   0.074763  -2.534   0.0113 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Pseudo R-squared: 0.3174

Coefficients (covariance):
              Effect     Parameter   Estimate
  tailup exponential  de (parsill)  1.555e-01
  tailup exponential         range  1.470e+02
     euclid gaussian  de (parsill)  6.090e+00
     euclid gaussian         range  6.154e+02
              nugget        nugget  4.465e-03
          dispersion    dispersion  6.448e+00


> # Print variance components of the model
> varcomp(ssn_mod)
# A tibble: 5 × 2
  varcomp            proportion
  <chr>                   <dbl>
1 Covariates (PR-sq)   0.317   
2 tailup_de            0.0170  
3 taildown_de          0       
4 euclid_de            0.665   
5 nugget               0.000488

> # Tidy the model output with confidence intervals and print
> print(tidy(ssn_mod, conf.int = TRUE))  
# A tibble: 11 × 7
   term                               estimate std.error statistic p.value conf.low conf.high
   <chr>                                 <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl>
 1 (Intercept)                         0.511      2.02      0.253   0.801    -3.45     4.47  
 2 ch_channel.width.over.valley.width  0.250      0.268     0.935   0.350    -0.274    0.775 
 3 ch_channel_width                   -0.254      0.227    -1.12    0.263    -0.700    0.191 
 4 ch_valley_width                     0.00966    0.214     0.0452  0.964    -0.409    0.429 
 5 hs_aspect.median                    0.128      0.162     0.790   0.430    -0.189    0.444 
 6 hs_bare.earth.mean                  0.0966     0.124     0.778   0.436    -0.147    0.340 
 7 hs_curvature.median                -0.189      0.0748   -2.53    0.0113   -0.336   -0.0429
 8 hs_dnbr.median                     -0.210      0.0937   -2.24    0.0251   -0.394   -0.0262
 9 hs_hillslope.length                 0.0312     0.111     0.281   0.779    -0.187    0.249 
10 hs_slope.median                    -0.133      0.0622   -2.14    0.0321   -0.255   -0.0114
11 ws_drainage_density                -0.297      0.245    -1.21    0.226    -0.777    0.184 

> # Provide a glance summary of the model and print
> print(glance(ssn_mod))
# A tibble: 1 × 9
      n     p  npar value   AIC  AICc logLik deviance pseudo.r.squared
  <int> <dbl> <int> <dbl> <dbl> <dbl>  <dbl>    <dbl>            <dbl>
1    78    11     6  125.  137.  139.  -62.7     8.53            0.317

> # Perform Leave-One-Out Cross Validation and print
> print("Leave One Out Cross Validation")
[1] "Leave One Out Cross Validation"

> loocv_results <- loocv(ssn_mod)

> print(loocv_results)
# A tibble: 1 × 4
     bias   MSPE RMSPE   RAV
    <dbl>  <dbl> <dbl> <dbl>
1 -0.0172 0.0331 0.182 0.201

> # Stop redirecting output
> sink()

> print("")
[1] ""

> # ----------------------------#
> # 10. Statistical Tests
> # ----------------------------#
> 
> 
> # --------- Shapiro-Wilk Test for Normality ---- .... [TRUNCATED] 
[1] "-------- Shapiro-Wilk Test for Normality ---------"

> print("  - Normality: To check if the residuals are normally distributed.")
[1] "  - Normality: To check if the residuals are normally distributed."

> print("  - p-value > 0.05: Fail to reject null hypothesis (residuals are normally distributed).")
[1] "  - p-value > 0.05: Fail to reject null hypothesis (residuals are normally distributed)."

> print("  - p-value <= 0.05: Reject null hypothesis (residuals are not normally distributed).\n")
[1] "  - p-value <= 0.05: Reject null hypothesis (residuals are not normally distributed).\n"

> shapiro_test <- shapiro.test(residuals)

> print("Shapiro-Wilk Test Results:")
[1] "Shapiro-Wilk Test Results:"

> print(shapiro_test)

	Shapiro-Wilk normality test

data:  residuals
W = 0.9712, p-value = 0.07411


> # --------- Breusch-Pagan Test for Homoscedasticity ---------
> print("-------- Breusch-Pagan Test for Homoscedasticity ---------")
[1] "-------- Breusch-Pagan Test for Homoscedasticity ---------"

> print("  - Homoscedasticity: To check if residuals have constant variance across all levels of fitted values.")
[1] "  - Homoscedasticity: To check if residuals have constant variance across all levels of fitted values."

> print("  - p-value > 0.05: Fail to reject null hypothesis (homoscedasticity holds).")
[1] "  - p-value > 0.05: Fail to reject null hypothesis (homoscedasticity holds)."

> print("  - p-value <= 0.05: Reject null hypothesis (heteroscedasticity present).\n")
[1] "  - p-value <= 0.05: Reject null hypothesis (heteroscedasticity present).\n"

> # Extract the model frame from the ssn_lm model
> data_ssn <- model.frame(ssn_mod)

> # Perform Breusch-Pagan Test
> bp_test <- bptest(ssn_mod)

> print("Breusch-Pagan Test Results:")
[1] "Breusch-Pagan Test Results:"

> print(bp_test)

	studentized Breusch-Pagan test

data:  ssn_mod
BP = 31.116, df = 10, p-value = 0.0005614


> # --------- Moran's I Test for Spatial Autocorrelation ---------
> print("\n-------- Moran's I Test for Spatial Autocorrelation ---------")
[1] "\n-------- Moran's I Test for Spatial Autocorrelation ---------"

> print("  - Spatial Autocorrelation: To determine if there is spatial autocorrelation in the residuals.")
[1] "  - Spatial Autocorrelation: To determine if there is spatial autocorrelation in the residuals."

> print("  - p-value > 0.05: Fail to reject null hypothesis (lack of spatial autocorrelation in residuals holds).")
[1] "  - p-value > 0.05: Fail to reject null hypothesis (lack of spatial autocorrelation in residuals holds)."

> print("  - p-value <= 0.05: Reject null hypothesis (spatial autocorrelation present).\n")
[1] "  - p-value <= 0.05: Reject null hypothesis (spatial autocorrelation present).\n"

> sink()

> print("Moran's I Test Results:")
[1] "Moran's I Test Results:"

> print(moran_test)

	Moran I test under randomisation

data:  residuals  
weights: lw    

Moran I statistic standard deviate = -1.195, p-value = 0.884
alternative hypothesis: greater
sample estimates:
Moran I statistic       Expectation          Variance 
     -0.105788804      -0.012987013       0.006030879 


> # Stop redirecting output
> sink()
