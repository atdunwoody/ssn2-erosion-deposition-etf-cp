
> # Save input parameters
> cat("Model Formula:\n")
Model Formula:

> print(model_formula)
ch_sfm.deposition.norm ~ ch_slope.median + ch_change.in.slope.over.width + 
    ch_channel.width.over.valley.width + ch_stream.power.central.diff + 
    hs_eastness.median + hs_bare.earth.mean + hs_ndvi.min + hs_dnbr.median

> cat("\nSSN Path:\n")

SSN Path:

> print(ssn_path)
[1] "Y:/ATD/GIS/ETF/Watershed Stats/SSN2/Outputs/MPM_deposition_logtrans/MPM_deposition_logtrans.ssn"

> cat("\nLSN Output Path:\n")

LSN Output Path:

> print(lsn_out)
[1] "Y:/ATD/GIS/ETF/Watershed Stats/SSN2/Outputs/MPM_deposition_logtrans/lsn_out"

> cat("\n")


> # Fit the model using the defined formula
> if (multiple_ws == TRUE){
+   ssn_mod <- ssn_glm(
+     formula = model_formula,
+     ssn.object = CP_s .... [TRUNCATED] 

> #----------------------------#
> #       Initialization       #
> #----------------------------#
> 
> # Define the prefix and type
> prefix <- "ET"

> type <- "deposition"  # Change this value as needed (e.g., "deposition")

> # Flags for loading and processing
> load_ssn <- FALSE

> # Define the output and input base folders
> base_output_folder <- "Y:/ATD/GIS/ETF/Watershed Stats/SSN2/Outputs"

> base_input_folder <- "Y:/ATD/GIS/ETF/Watershed Stats/SSN2/Inputs"

> # Construct the specific output folder using the prefix and type
> output_folder <- file.path(base_output_folder, paste0(prefix, "_", type, "_logtra ..." ... [TRUNCATED] 

> # Define the output file using the prefix and type
> output_file <- file.path(
+   output_folder, 
+   paste0(prefix, "_ch_sfm.", type, ".norm VIF-2 ..." ... [TRUNCATED] 

> # Dynamically construct the model formula using the type variable
> response_var <- paste0("ch_sfm.", type, ".norm")

> model_formula_str <- paste(
+   response_var, "~",
+   "ch_elevation.mean +",
+   "ch_slope.median +",
+   "ch_flow.accumulation.max +",
+   "ch_cur ..." ... [TRUNCATED] 

> model_formula <- as.formula(model_formula_str)

> # Define other input and output paths using the prefix and type
> # Uncomment and modify the following line if you need to use the combined watershe .... [TRUNCATED] 

> # Define the SSN path using the prefix and type
> ssn_path <- file.path(
+   output_folder, 
+   paste0(prefix, "_", type, "_logtrans.ssn")
+ )

> # Define the LSN output folder (assuming it doesn't require the prefix)
> lsn_out <- file.path(output_folder, "lsn_out")

> # Define the input streams path (assuming it doesn't require the prefix)
> input_streams <- file.path(base_input_folder, "Streams", "streams_100k.gp ..." ... [TRUNCATED] 

> # Create the output folder if it doesn't exist
> if (!dir.exists(output_folder)) {
+   dir.create(output_folder, recursive = TRUE)
+ }

> # Load Required Libraries
> library(SSN2)

> library(SSNbler)

> library(sf)

> library(dplyr)

> library(purrr)

> library(ggplot2)

> library(lmtest)

> library(spdep)

> library(classInt) # For spatial weights if needed

> library(knitr)    # For better output formatting (optional)

> #----------------------------#
> #        Data Loading        #
> #----------------------------#
> 
> if (load_ssn == FALSE){
+   # Read spatial dat .... [TRUNCATED] 
Reading layer `streams_100k' from data source `Y:\ATD\GIS\ETF\Watershed Stats\SSN2\Inputs\Streams\streams_100k.gpkg' using driver `GPKG'
Simple feature collection with 643 features and 2 fields
Geometry type: LINESTRING
Dimension:     XY
Bounding box:  xmin: 404042.6 ymin: 4447904 xmax: 414579.6 ymax: 4466669
Projected CRS: NAD83 / UTM zone 13N
Reading layer `ET deposition ssn points' from data source `Y:\ATD\GIS\ETF\Watershed Stats\SSN2\Inputs\Combined Watersheds\ET deposition ssn points.gpkg' using driver `GPKG'
Simple feature collection with 219 features and 59 fields
Geometry type: POINT
Dimension:     XY
Bounding box:  xmin: 408578.4 ymin: 4449827 xmax: 413029.4 ymax: 4456571
Projected CRS: NAD83 / UTM zone 13N


SSN object is valid: TRUE

> # Create distance matrix
> ssn_create_distmat(CP_ssn)

> #----------------------------#
> #      Model Fitting         #
> #----------------------------#
> 
> # Redirect output to the specified file in the .... [TRUNCATED] 
